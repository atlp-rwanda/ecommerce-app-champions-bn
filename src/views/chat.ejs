

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <link
    rel="stylesheet"
    href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/5.12.1/css/all.min.css"
    integrity="sha256-mmgLkCYLUQbXn0B1SRqzHar6dCnv9oZFPEC1g1cwlkk="
    crossorigin="anonymous"
  />
  <style>
    @import url("https://fonts.googleapis.com/css?family=Roboto&display=swap");

:root {
  --dark-color-a: #667aff;
  --dark-color-b: #7386ff;
  --light-color: #e6e9ff;
  --success-color: #5cb85c;
  --error-color: #d9534f;
}

* {
  box-sizing: border-box;
  margin: 0;
  padding: 0;
}

body {
  font-family: "Roboto", sans-serif;
  font-size: 16px;
  background: var(--light-color);
  margin: 20px;
}

ul {
  list-style: none;
}

a {
  text-decoration: none;
}

.btn {
  cursor: pointer;
  padding: 5px 15px;
  background: var(--light-color);
  color: var(--dark-color-a);
  border: 0;
  font-size: 17px;
}

/* chat page */

.chat-container {
    max-width: 1100px;
    background: #fff;
    margin: 30px auto;
    overflow: hidden;
  }

.chat-main {
    display: grid;
    grid-template-columns: 1fr 3fr;
  }
  
  .chat-sidebar {
    background: var(--dark-color-b);
    color: #fff;
    padding: 20px 20px 60px;
    overflow-y: scroll;
  }
  
  .chat-sidebar h2 {
    font-size: 20px;
    background: rgba(0, 0, 0, 0.1);
    padding: 10px;
    margin-bottom: 20px;
  }
  
  .chat-sidebar h3 {
    margin-bottom: 15px;
  }
  
  .chat-sidebar ul li {
    padding: 10px 0;
  }
  
  .chat-messages {
    padding: 30px;
    max-height: 500px;
    overflow-y: scroll;
  }
  
  .chat-messages #messages {
    padding: 10px;
    margin-bottom: 15px;
    background-color: var(--light-color);
    border-radius: 5px;
    overflow-wrap: break-word;
  }
  
  .chat-messages #messages .meta {
    font-size: 15px;
    font-weight: bold;
    color: var(--dark-color-b);
    opacity: 0.7;
    margin-bottom: 7px;
  }
  
  .chat-messages #messages .meta span {
    color: #777;
  }
  

  .chat-form-container {
    padding: 20px 30px;
    background-color: var(--dark-color-a);
  }
  
  .chat-form-container form {
    display: flex;
  }
  
  .chat-form-container input[type="text"] {
    font-size: 16px;
    padding: 5px;
    height: 40px;
    flex: 1;
  }
  </style>
    <title>liveChat</title>
</head>
<body>
    <div class="chat-container">

        <main class="chat-main">
            <div class="chat-sidebar">
              <h3><i class="fas fa-comments"></i>Champions</h3>
              <h3 id="status" class="status"></h3>
              <h3><i class="fas fa-users"></i>Active Users</h3>
              <ul id="users">
              </ul>
            </div>
            <div class="chat-messages">
                <div id="messages"></div>
            </div>
        </main>

        <div class="chat-form-container">
            <form id="message-form">
                <input type="text" id="message-input" autocomplete="off" placeholder="Type your message here...">
                <button type="submit" class="btn"><i class="fas fa-paper-plane"></i> Send</button>
            </form>
        </div>

    </div>
  
    <!-- <script src="https://cdn.socket.io/socket.io-3.0.1.min.js"></script> -->
    <script src="https://cdn.socket.io/4.1.2/socket.io.min.js"></script>
    <script>
    const messageForm = document.querySelector('#message-form');
    const messageInput = document.querySelector('#message-input');
    const messages = document.querySelector('#messages');
    const userList = document.getElementById("users");
    const div = document.createElement('div');
    const div1 = document.createElement('div');
    const userStatus = document.querySelector('.status');
    let socket;
async function liveChat(){
     await fetch('http://localhost:5000/api/user/single', {
            method: 'GET',
            headers: {
                'Content-Type': 'application/json',
                'Cookie': document.cookie,
            },
      })
      .then(async response => await response.json())
      .then(async data => {
       const userdata=data.data;
       socket =await io('http://localhost:5000', {query:userdata}); 
       
       let userName= await userdata.firstName;
        //user join chat
       socket.emit("joinChat",userName)

        // Emit message to server
       messageForm.addEventListener('submit',async (e) => {
	      e.preventDefault();
	      await socket.emit('chatMessage', messageInput.value);
            // clear input
            messageInput.value = '';
            messageInput.focus();
       });

       // Receive messages from server
       socket.on('message', (message) => {
          outputMessage(message);
          user(message);
	
        });

        // getUsers 
        socket.on("connectedUser", (users) => {
        outputUsers(users)
        });
          

        // Output message to DOM
       async function outputMessage(message) {

          // fetch message from server
          await fetch(`http://localhost:${5000}/api/chat/get-all-chat`,{
            method: 'GET',
            headers: {
                'Content-Type': 'application/json',
                'Cookie': document.cookie,
            }
          })

            .then(async (response) => {
              const data = await response.json();
              return data.data.chats;
            })

            .then(async (chats)=>{
              const messagesHTML = await chats.map((chatMessage) => {
              const date = new Date(chatMessage.createdAt);
              const formattedDate = date.toLocaleString('en-US', {
                hour: 'numeric',minute: 'numeric',hour12: true,day: 'numeric',month: 'numeric',year: 'numeric'
              });
              return `
              <div class="message">
                <p class="meta">${chatMessage.User.firstName}   <span>${formattedDate}</span></p>
                <p class="text">${chatMessage.message}</p>
              </div>
              `;
             } ).join('');
              messages.innerHTML = await messagesHTML;
            })


            .catch(error => {
              console.error(error.message);
          })

        };
        // display userStatus to DOM
        const user=(message)=>{
          userStatus.innerHTML =`
            <p class="meta">${message.username}<span>  ${message.time}</span></p>
            <p class="text">${message.text}</p>
             `;
        }

        // output users to DOM
        const outputUsers = (users) => {
        userList.innerHTML = `
        ${users.map((user) => `<li>${user.username}</li>`).join("")}
       `;
      };
      })
      .catch(error => {
        console.error(error.message);
     });

};
liveChat()

</script>
    
</body>
</html>